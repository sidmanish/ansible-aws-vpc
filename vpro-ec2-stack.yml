---
- name: Setup Vprofile Stack
  hosts: localhost
  connection: local
  gather_facts: no 
  tasks:
    - name: Import VPC setup variables
      include_vars: vars/output_vars

    - name: Import vprofile-setup variables
      include_vars: vars/vprostacksetup

    - name: Create Vprofile ec2 key
      ec2_key:
        name: vprokey 
        region: "{{region}}"
      register: vprokey_out

    - name: Save Private key info to loginkey_vpro.pem
      copy:
        content: "{{vprokey_out.key.private_key}}"
        dest: "./loginkey_vpro.pem"
        mode: 0600
      when: vprokey_out.changed

    - name: Create security Group for Load Balancer
      ec2_group:
        name: vproELB-sg
        description: allow port 80 from everywhere and all port within sg 
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: vproELBSG_out

    - name: Create security Group for Vprofile Stack
      ec2_group:
        name: vproStack-sg
        description: allow port 22 from bastion host and all 80 from load balancer 
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{vproELBSG_out.group_id}}"
            
          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{BastionSGid}}"
      register: vproStackSG_out
    
    - name: update security rules with its own id 
      ec2_group:
        name: vproStack-sg
        description: allow port 
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{vproStackSG_out.group_id}}"

    - name: Create Nginx web01
      ec2: 
        key_name: vprokey
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{nginx_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "web01"
          Project: VProfile
          Owner: Devops Team
        exact_count: 1
        count_tag:
          Name: "web01"
          Project: VProfile
          Owner: Devops Team
        group_id: "{{vproStackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: web01_out  
    
    - name: Create Tomcat app01
      ec2: 
        key_name: vprokey
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{tomact_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "app01"
          Project: VProfile
          Owner: Devops Team
        exact_count: 1
        count_tag:
          Name: "app01"
          Project: VProfile
          Owner: Devops Team
        group_id: "{{vproStackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: app01_out 


    - name: Create memechache mc01
      ec2: 
        key_name: vprokey
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{memecache_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "mc01"
          Project: VProfile
          Owner: Devops Team
        exact_count: 1
        count_tag:
          Name: "mc01"
          Project: VProfile
          Owner: Devops Team
        group_id: "{{vproStackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: mc01_out  


    
    - name: Create rabbitmq rmq01
      ec2: 
        key_name: vprokey
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{rmq_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "rmq01"
          Project: VProfile
          Owner: Devops Team
        exact_count: 1
        count_tag:
          Name: "rmq01"
          Project: VProfile
          Owner: Devops Team
        group_id: "{{vproStackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: rmq01_out 



    - name: Create MySQL db01
      ec2: 
        key_name: vprokey
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{mysql_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "db01"
          Project: VProfile
          Owner: Devops Team
        exact_count: 1
        count_tag:
          Name: "db01"
          Project: VProfile
          Owner: Devops Team
        group_id: "{{vproStackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: db01_out 

    - debug:
        var: db01_out.tagged_instances[0].id

    - local_action:
        module: ec2_elb_lb
        name: "vprofile-elb"
        region: "{{region}}"
        state: present
        instance_ids: 
          - "{{web01_out.tagged_instances[0].id}}"
        purge_instance_ids: true
        security_group_ids: "{{vproELBSG_out.group_id}}"
        subnets:
          - "{{pubsub1id}}"
          - "{{pubsub2id}}"
          - "{{pubsub3id}}"
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80

    
    - name: Insert/Update Hosts IP & Name in file Provision-stack/group_vars/hostsip
      blockinfile:
        path: provision-stack/group_vars/hostsip
        block: |
          web01_ip: {{ web01_out.tagged_instances[0].private_ip }}
          app01_ip: {{ app01_out.tagged_instances[0].private_ip }}
          mc01_ip: {{ mc01_out.tagged_instances[0].private_ip }}
          rmq01_ip: {{ rmq01_out.tagged_instances[0].private_ip }}
          db01_ip: {{ db01_out.tagged_instances[0].private_ip }}


    - name: copy login key to provision_stack directory
      copy:
        src: loginkey_vpro.pem
        dest: provision-stack/loginkey_vpro.pem
        mode: '0400'


    - name: Insert/Update Inventory file provision-stack/inventory-vpro
      blockinfile:
        path: provision_stack/inventory-vpro
        block: |
          web01_ansible_host: {{ web01_out.tagged_instances[0].private_ip }}
          app01_ansible_host: {{ app01_out.tagged_instances[0].private_ip }}
          mc01_ansible_host: {{ mc01_out.tagged_instances[0].private_ip }}
          rmq01_ansible_host: {{ rmq01_out.tagged_instances[0].private_ip }}
          db01_ansible_host: {{ db01_out.tagged_instances[0].private_ip }}
          cntl ansible_host: 127.0.0.1 ansible_connection=local

          [webservgrp]
          web01
          [appservgrp]
          app01
          [mcservgrp]
          mc01
          [rmqservgrp]
          rmq01
          [dbservgrp]
          db01
          [control]
          cntl

          [stack_inst:children]
          webservgrp
          appservgrp
          mcservgrp
          rmqservgrp
          dbservgrp
          
          [stack_inst:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=loginkey_vpro.pem
          #ansible_python_interpreter=/usr/bin/python3



    